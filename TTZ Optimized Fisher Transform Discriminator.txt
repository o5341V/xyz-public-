//@version=4
// Based on UncLeL's Fisher and Discriminator code
// By Futur
// Upgraded to v4 by futuremihai
study(title = "Optimized Fisher Transform")
 
PI=3.14159265359
 
conversionPeriods = 9
basePeriods = 26
laggingSpan2Periods = 52
displacement = 26
 
donchian(len) => avg(lowest(len), highest(len))
 
conversionLine = donchian(conversionPeriods)
baseLine = donchian(basePeriods)
leadLine1 = avg(conversionLine, baseLine)
leadLine2 = donchian(laggingSpan2Periods)
 
source = hlc3

float Period =.0
float C1 =.0
float C2 =.0
float Df =.0
float C3 =.0
float smooth =.0
float Q1 =.0
float I1 =.0
float jI =.0
float jQ =.0
float I2 =.0
float Q2 =.0
float Re =.0
float Im =.0

//
// --- Start the Homodyne Discriminator Caculations
//
// Mutable Variables (non-series)
C1     := 0.0962
C2     := 0.5769
Df     := 0.5
 
//
C3      := (nz(Period[1])*0.075+0.54)
smooth    := ((hl2*4.0) + (hl2[1]*3.0) + (hl2[2]*2.0) + (hl2[3]))/10.0
dDeTrend  = (smooth*C1 + nz(smooth[2])*C2 - nz(smooth[4])*C2 - nz(smooth[6])*C1)*C3
 
// Compute InPhase and Quadrature components
Q1      := (dDeTrend*C1 + nz(dDeTrend[2])*C2 - nz(dDeTrend[4])*C2 - nz(dDeTrend[6])*C1)*C3
I1      := nz(dDeTrend[3])
 
// Advance Phase of I1 and Q1 by 90 degrees
jI      := (I1*C1 + nz(I1[2])*C2 - nz(I1[4])*C2 - nz(I1[6])*C1)*C3
jQ      := (Q1*C1 + nz(Q1[2])*C2 - nz(Q1[4])*C2 - nz(Q1[6])*C1)*C3
 
// Phaser addition for 3 bar averaging
I2_  = I1 - jQ
Q2_  = Q1 + jI
// Smooth i and q components before applying discriminator
I2  := 0.2*I2_ + 0.8*nz(I2[1])
Q2  := 0.2*Q2_ + 0.8*nz(Q2[1])
 
// Extract Homodyne Discriminator
Re_ = I2*nz(I2[1]) + Q2*nz(Q2[1])
Im_ = I2*nz(Q2[1]) - Q2*nz(I2[1])
Re  := 0.2*Re_ + 0.8*nz(Re[1])
Im  := 0.2*Im_ + 0.8*nz(Im[1])
 
dp_ = iff(Re!=0 and Im!=0 , 6.28318/atan(Im/Re) , 0)
II  = nz(Period[1])
dp  = max(max(min(min(dp_,1.5*II),50),0.6667*II),6)
Period := dp*0.2 + nz(Period[1])*0.8

float SmoothPeriod =.0
SmoothPeriod := 0.33*Period + nz(SmoothPeriod[1])*0.67

lengthx = 1
for i = 0 to 1000
    if i >= SmoothPeriod
        break
    lengthx :=lengthx + 1
cycle_length_modifier = input(2.0, title="Modifier to shorten the Dominant cycle Length (Half of dominant cycle, Third, etc")
lengthModded = lengthx * cycle_length_modifier
 
//Calculate the Modified Fisher and length selection
fix_the_length = input(true, title="Use Fisher fixed lookback or on cycle probabilities")
fixed_length = input(100, title="Lookback for the Optimizied Fisher (Probability of events for a certain lookback)")
activate_modifier = input(true, title="Modify Auto Cycle Component")
length1 = fix_the_length? fixed_length: activate_modifier ? lengthModded : lengthx
 
val = 0.0
 
for i=0 to length1
    val := val + ((source[i]-source[i+1]) <= 0 ? 0 : source[i]* volume[i])
 
val2 = 0.0
for i=0 to length1
    val2 := val2 +  ((source[i]-source[i+1]) >= 0 ? 0 : source[i]* volume[i])
flowRatio = val/val2
 
 
//hline(0, color=color.new(#34e1eb,30), title="0 Line")
//hline(2, color=color.new(#34e1eb,30), title="2 Std. Devs")
//hline(4, color=color.new(#34e1eb,30), title="4 Std. Devs")
//hline(-2, color=color.new(#34e1eb,30), title="-2 Std. Devs")
//hline(-4, color=color.new(#34e1eb,30), title="-4 Std. Devs")
HL2 = 1-(100- 100/(1+flowRatio))/100 //test value to see flowrate/MFI values
//xHL2 = open
//WIP, still need to figure out how to manipulate the transform to u= 0, sigma =1 when orginal PDF not balanced
ff(_xHL2,_length)=>
    _xMaxH = highest(_xHL2, round(_length))
    _xMinL = lowest(_xHL2, round(_length))
    _normalized = 2.0*((_xHL2 - _xMinL) / (_xMaxH - _xMinL) - 0.5)
    _nValue1 = 0.0
    _nValue1 := ema(4*(((_xHL2 - _xMinL)/(_xMaxH - _xMinL))-0.5) - nz(_nValue1[10]),10) //ZLMA(Ehlers v2) of normalized input
    _nValue2 = iff(_nValue1 > .99,  .999, iff(_nValue1 < -.99, -.999, _nValue1))
    _scale = 1-(100-100/(1+flowRatio))/100
    _xLag = (_length - 1) / 2
    _z_score = (_normalized-_nValue2)/stdev(_normalized,round(_length))
    _std = stdev(_normalized,round(_length))//WIP
    float _Fish = 0
    _Fish := ema(1*log(((_scale)* (1 + _nValue2) / (1-_nValue2))) - nz(_Fish[3]),3)
 
plot(ff(close,length1), color=color.new(#d74444,5), title="Decibel Fisher Transform", linewidth=1)
//plot(HL2)

top1 = ff(close,10) > 4
top11 = ff(close,21) > 4
top111 = ff(close,52) > 4
top1111 = ff(close,155) > 4
top11111 = ff(close,252) > 4
top111111 = ff(close,365) > 4
top1111111 = ff(close,555) > 4
top11111111 = ff(close,999) > 4

topp1 = ff(close,5) > 4
topp11 = ff(close,8) > 4
topp111 = ff(close,13) > 4
topp1111 = ff(close,25) > 4
topp11111 = ff(close,34) > 4
topp111111 = ff(close,89) > 4
topp1111111 = ff(close,755) > 4
topp11111111 = ff(close,1555) > 4



//plotshape(top1, color=color.new(#f44336,75), style=shape.square, location=location.top)
//plotshape(top11, color=color.new(#f44336,65), style=shape.square, location=location.top)
//plotshape(top111, color=color.new(#f44336,55), style=shape.square, location=location.top)
//plotshape(top1111, color=color.new(#f44336,35), style=shape.square, location=location.top)
//plotshape(top11111, color=color.new(#f44336,25), style=shape.square, location=location.top)
//plotshape(top111111, color=color.new(#ffffff,15), style=shape.square, location=location.top)
//plotshape(top1111111, color=color.new(#ffffff,10), style=shape.square, location=location.top)
//plotshape(top11111111, color=color.new(#ffffff,0), style=shape.square, location=location.top)

//plotshape(topp1, color=color.new(#f44336,75), style=shape.square, location=location.top)
//plotshape(topp11, color=color.new(#f44336,65), style=shape.square, location=location.top)
//plotshape(topp111, color=color.new(#f44336,55), style=shape.square, location=location.top)
//plotshape(topp1111, color=color.new(#f44336,35), style=shape.square, location=location.top)
//plotshape(topp11111, color=color.new(#f44336,25), style=shape.square, location=location.top)
//plotshape(topp111111, color=color.new(#ffffff,15), style=shape.square, location=location.top)
//plotshape(topp1111111, color=color.new(#ffffff,10), style=shape.square, location=location.top)
//plotshape(topp11111111, color=color.new(#ffffff,0), style=shape.square, location=location.top)

bottom1 = ff(close,5) < -4
bottom11 = ff(close,8) < -4
bottom111 = ff(close,13) < -4
bottom1111 = ff(close,25) < -4
bottom11111 = ff(close,34) < -4
bottom111111 = ff(close,89) < -4
bottom1111111 = ff(close,755) < -4
bottom11111111 = ff(close,1555) < -4

bottomm1 = ff(close,10) < -4
bottomm11 = ff(close,21) < -4
bottomm111 = ff(close,52) < -4
bottomm1111 = ff(close,155) < -4
bottomm11111 = ff(close,252) < -4
bottomm111111 = ff(close,365) < -4
bottomm1111111 = ff(close,555) < -4
bottomm11111111 = ff(close,999) < -4

plotshape(bottom1, color=color.new(#00ffcb,75), style=shape.square, location=location.bottom)
plotshape(bottomm1, color=color.new(#00ffcb,75), style=shape.square, location=location.bottom)

plotshape(bottom11, color=color.new(#00ffcb,65), style=shape.square, location=location.bottom)
plotshape(bottomm11, color=color.new(#00ffcb,65), style=shape.square, location=location.bottom)

plotshape(bottom111, color=color.new(#00ffcb,55), style=shape.square, location=location.bottom)
plotshape(bottomm111, color=color.new(#00ffcb,55), style=shape.square, location=location.bottom)

plotshape(bottom1111, color=color.new(#00ffcb,35), style=shape.square, location=location.bottom)
plotshape(bottomm1111, color=color.new(#00ffcb,35), style=shape.square, location=location.bottom)

plotshape(bottom11111, color=color.new(#00ffcb,25), style=shape.square, location=location.bottom)
plotshape(bottomm11111, color=color.new(#00ffcb,25), style=shape.square, location=location.bottom)

plotshape(bottom111111, color=color.new(#ffffff,15), style=shape.square, location=location.bottom)
plotshape(bottomm111111, color=color.new(#ffffff,15), style=shape.square, location=location.bottom)

plotshape(bottom1111111, color=color.new(#ffffff,10), style=shape.square, location=location.bottom)
plotshape(bottomm1111111, color=color.new(#ffffff,10), style=shape.square, location=location.bottom)

plotshape(bottom11111111, color=color.new(#ffffff,0), style=shape.square, location=location.bottom)
plotshape(bottomm11111111, color=color.new(#ffffff,0), style=shape.square, location=location.bottom)