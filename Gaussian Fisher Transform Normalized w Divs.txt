// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© user1928374560XYZ

//@version=5
indicator("ChatGPT Creation", shorttitle = "_f", overlay = false)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                                                                                 //
//               ----------------------------------------------- Adaptive MA -------------------------------------------------------------------                                   //
//                                                                                                                                                                                 //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

price = input(title='Price Source:', defval=close)
alphamin = input(title='alpha Min', defval=6)
alphamax = input(title='alpha Max', defval=75)
ama = price

// Static model parameters
minfactor = 2.0 / (alphamax + 1.0)
maxfactor = 2.0 / (alphamin + 1.0)
deviation_max = 1.
deviation_min = 1.
beta_hb = 1.
beta_lb = 1.

normalized_atan = 0.
alpha = (minfactor + maxfactor) / 2.0

beta = 5

pi = 3.141592654

ama := alpha[1] * price + (1 - alpha[1]) * nz(ama[1])

deviation_max := alpha[1] * math.max((price[0] - price[1]) / price[1], 0) + (1 - alpha[1]) * nz(deviation_max[1])
deviation_min := -alpha[1] * math.min((price[0] - price[1]) / price[1], 0) + (1 - alpha[1]) * nz(deviation_min[1])

beta_hb := beta * deviation_max
beta_lb := beta * deviation_min

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                                                                                 //
//               ----------------------------------------------- Fisher Transform -------------------------------------------------------------------                              //
//                                                                                                                                                                                 //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

heikon = input(false)
display_FisherTransform1 = input(true)
display_FisherTransform2 = input(false)
heikinashi = request.security(ticker.heikinashi(syminfo.tickerid), "", close)
vsrc = heikon ? heikinashi : ama
vlen = input(100, title = 'fisher_length')
vhigh_ = ta.highest(vsrc, vlen)
vlow_ = ta.lowest(vsrc, vlen)
vvalue = 0.0
vvalue := .66 * ((vsrc - vlow_) / (vhigh_ - vlow_) - .5) + .67 * nz(vvalue[1])
vfisher = .5 * math.log((1 + vvalue) / (1 - vvalue))

vz = 2
vp = vvalue
vq = 1 / math.pow(3 *vz, 2) - (1/3)
vtransform1 = math.pow(1 - math.pow(vp, 2), vq)
vtransform2 = vq * (-2 * vp / (1 - math.pow(vp, 2))) * vtransform1
vsquareV = vp / (3 * math.sqrt(1 - math.pow(vp, 2))) * (math.pow(vz, 2) - 1) - math.pow(vz, 2) / 2 * (math.sqrt(1 - math.pow(vp, 2)) * vtransform2 / vtransform1)

sqVTF(ticker) =>
    a= request.security(ticker, "", vsquareV)
    b= request.security(ticker, "", vsquareV)
    c= request.security(ticker, "", vsquareV)
    theavg = math.avg(-a,-b,-c)*3
    theavg
//
x = sqVTF(syminfo.tickerid)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                                                                                 //
//               ----------------------------------------------- Normalized Fisher -------------------------------------------------------------------                             //
//                                                                                                                                                                                 //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//lookback
lookback_period = input(500)

normalize_maxValue(x, period) =>
    //lookback
    maxValue = math.max(math.abs(x), period)

    //normalize bettween -1 to 1
    (x / maxValue) * 2

// Use the function to normalize the signal
normalized_maxValue = normalize_maxValue(x, lookback_period)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                                                                                 //
//               ----------------------------------------------- Divergences -------------------------------------------------------------------                                   //
//                                                                                                                                                                                 //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

method = input.string(defval='Fisher Transform1', options=['Fisher Transform1', 'Fisher Transform2'])

SHOW_LABEL = false

SHOW_CHANNEL = false

uHid = input(false, title='Show Hidden Divergence')

uReg = input(true, title='Show Regular Divergence')

f_top_fractal(_src) =>
    _src[4] < _src[2] and _src[3] < _src[2] and _src[2] > _src[1] and _src[2] > _src[0]

f_bot_fractal(_src) =>
    _src[4] > _src[2] and _src[3] > _src[2] and _src[2] < _src[1] and _src[2] < _src[0]

f_fractalize(_src) =>
    f_bot_fractal__1 = f_bot_fractal(_src)
    f_top_fractal(_src) ? 1 : f_bot_fractal__1 ? -1 : 0

//

oscilator_high = float(na)

oscilator_low = float(na)

//

if method == 'Fisher Transform1'

    oscilator_high := sqVTF(syminfo.tickerid)

    oscilator_low := sqVTF(syminfo.tickerid)
    oscilator_low

if method == 'Fisher Transform2'

    oscilator_high := normalize_maxValue(x, lookback_period)

    oscilator_low := normalize_maxValue(x, lookback_period)
    oscilator_low

fractal_top = f_fractalize(oscilator_high) > 0.1 ? oscilator_high[2] : na

fractal_bot = f_fractalize(oscilator_low) < -0.1 ? oscilator_low[2] : na

high_prev = ta.valuewhen(fractal_top, oscilator_high[2], 0)[2]

high_price = ta.valuewhen(fractal_top, high[2], 0)[2]

low_prev = ta.valuewhen(fractal_bot, oscilator_low[2], 0)[2]

low_price = ta.valuewhen(fractal_bot, low[2], 0)[2]

regular_bearish_div = fractal_top and high[2] > high_price and oscilator_high[2] < high_prev

hidden_bearish_div = fractal_top and high[2] < high_price and oscilator_high[2] > high_prev

regular_bullish_div = fractal_bot and low[2] < low_price and oscilator_low[2] > low_prev

hidden_bullish_div = fractal_bot and low[2] > low_price and oscilator_low[2] < low_prev

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                                                                                 //
//               ----------------------------------------------- Divergence Plots -------------------------------------------------------------------                              //
//                                                                                                                                                                                 //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

plot(title='H F', series=fractal_top ? oscilator_high[2] : na, color=regular_bearish_div and uReg or hidden_bearish_div and uHid ? #FF5252 : not SHOW_CHANNEL ? na : color.silver, offset=-2)

plot(title='L F', series=fractal_bot ? oscilator_low[2] : na, color=regular_bullish_div and uReg or hidden_bullish_div and uHid ? #00fe7d : not SHOW_CHANNEL ? na : color.silver, offset=-2)

plot(title='H D', series=fractal_top ? oscilator_high[2] : na, style=plot.style_circles, color=regular_bearish_div and uReg or hidden_bearish_div and uHid ? #FF5252 : not SHOW_CHANNEL ? na : color.silver, linewidth=3, offset=-2)

plot(title='L D', series=fractal_bot ? oscilator_low[2] : na, style=plot.style_circles, color=regular_bullish_div and uReg or hidden_bullish_div and uHid ? #00fe7d : not SHOW_CHANNEL ? na : color.silver, linewidth=3, offset=-2)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                                                                                 //
//               ----------------------------------------------- Color Threshholds -------------------------------------------------------------------                             //
//                                                                                                                                                                                 //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

_bcolor_threshhold_upper = input.float(0.5, step = 0.1)
_bcolor_threshhold_lower = input.float(-0.5, step = 0.1)

_nm_fcolor = normalized_maxValue >= _bcolor_threshhold_upper ? #FF5252 : normalized_maxValue <= _bcolor_threshhold_lower ? #00fe7d : #434651

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                                                                                 //
//               ----------------------------------------------- Bar Color -------------------------------------------------------------------                                     //
//                                                                                                                                                                                 //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

_show_bcolor = input(false, 'display barcolor')

_bcolor_plot = _show_bcolor ? _nm_fcolor : na 

barcolor(_bcolor_plot)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                                                                                 //
//               ----------------------------------------------- Oscillator Plots -------------------------------------------------------------------                              //
//                                                                                                                                                                                 //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

plot(display_FisherTransform1 ? x : na, title="Unbounded_f", color=ta.barssince(x < -5) < 20 and ta.ema(x, 8) < x ? #00fe7d : ta.barssince(x > 5) < 20 and ta.ema(x, 8) > x ? #FF5252 : #5d606b, style=plot.style_line, trackprice=true)

plot(display_FisherTransform2 ? normalized_maxValue : na, title="Bounded_f", color = _nm_fcolor, style=plot.style_line, trackprice=true)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////