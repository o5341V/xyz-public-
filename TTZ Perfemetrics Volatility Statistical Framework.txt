// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Uni_ve12se
//@version=4

study("Perfemetrics Volatility Statistical Framework", shorttitle="Perfemetrics VSF")

// Switcher
visualization = input(title="Visualization", options = ["Bilateral", "Absolute Delta", "Unilateral"], defval="Unilateral")
// Switcher

// Heikin Ashi Calls Module Open
heikClose = security(heikinashi(syminfo.tickerid), timeframe.period, close)
heikOpen = security(heikinashi(syminfo.tickerid), timeframe.period, open)

heikGreen = heikClose > heikOpen
heikRed = heikClose < heikOpen
// Heikin Ashi Calls Module Close

volatilityTotal = (high/low)-1
volatilityNegative = visualization=="Unilateral" ? (open/low)-1 : 1-(open/low)
volatilityPositive = 1-(open/high)
volatilityDifference = visualization=="Absolute Delta" or visualization=="Unilateral" ? abs(abs(volatilityPositive)-abs(volatilityNegative)) : abs(volatilityPositive)-abs(volatilityNegative)

period = input(30, "Average Volatility Period")

avgTT = sma(volatilityTotal, period)
avgVN = sma(volatilityNegative, period)
avgVP = sma(volatilityPositive, period)

// Statistical Analysis Framework Module Open

volNegThreshold = input(0.03)

mult = input(2.0, "Multiple")

volatilityTypeCurrentSwitcher = input(title="Volatility Type Current", options = ["Positive", "Negative", "Total", "Delta"], defval="Negative")
volatilityTypePreviousSwitcher = input(title="Volatility Type Previous", options = ["Positive", "Negative", "Total", "Delta"], defval="Negative")

volatilityTypeCurrent = volatilityTypeCurrentSwitcher=="Positive" ? volatilityPositive : volatilityTypeCurrentSwitcher=="Negative" ? volatilityNegative : volatilityTypeCurrentSwitcher=="Total" ? volatilityTotal : volatilityTypeCurrentSwitcher=="Delta" ? volatilityDifference : na
volatilityTypePrevious = volatilityTypePreviousSwitcher=="Positive" ? volatilityPositive : volatilityTypePreviousSwitcher=="Negative" ? volatilityNegative : volatilityTypePreviousSwitcher=="Total" ? volatilityTotal : volatilityTypePreviousSwitcher=="Delta" ? volatilityDifference : na

C1 = (heikRed and heikRed[1]) and (volatilityTypeCurrent > volatilityTypePrevious[1]*mult) and (volatilityTypePrevious[1] > volNegThreshold)
notC1 = not C1

trackingPeriod = input(10, "Tracking Period")

mutualSeries = C1[trackingPeriod]

targetCondition = close[0] > close[trackingPeriod]

seriesTarget = mutualSeries and targetCondition
notSeriesTarget = not seriesTarget

seriesControl = mutualSeries and not targetCondition
notSeriesControl = not seriesControl

success = seriesTarget==true ? mutualSeries : na

barcolor(heikGreen and not seriesTarget and not seriesControl ? #26a69a : seriesTarget ? color.lime : seriesControl ? #000000 : na, title="Green + Condition")
barcolor(heikRed and not C1 ? #ef5350 : C1 ? color.white : na, title="Red + Condition")
//barcolor(seriesControl ? color.maroon : na, title="Not Desired Outcome")

lookback = input(1500)

target = seriesTarget ? 1 : 0
control = seriesControl ? 1 : 0
//comparison = HallerGreen == HeikGreen ? 1 : 0
percentage = (sum(target, lookback)/((sum(target, lookback)+sum(control, lookback)))*100)

plotshape(seriesTarget ? percentage : na , text='v', color=color.lime, title="Mark Desired Outcome", location=location.absolute)
plotshape(seriesControl ? percentage : na, text='x', color=color.white, title="Mark Not Desired Outcome", location=location.absolute)

//plot(comparison, color=color.white, style=plot.style_histogram, display=display.none)
plot(percentage, title="Occurrence Percentage", color=color.lime, style=plot.style_line)
