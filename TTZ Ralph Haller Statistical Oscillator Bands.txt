// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
//@version=4
study(title="Ralph Haller Statistical Oscillator", shorttitle="Ralph Haller Statistical Oscillator", max_bars_back=5000, overlay=false)

////////////////////
// --- Data Source Module Open
// Heikin Ashi
heikClose = security(heikinashi(syminfo.tickerid), timeframe.period, close)
heikOpen = security(heikinashi(syminfo.tickerid), timeframe.period, open)
heikGreen = heikClose > heikOpen
heikRed = heikClose < heikOpen

// Regular Japanese
jpGreen = close > open
jpRed = close < open
// --- Data Source Module Close
////////////////////

// OHLC Data & Derivatives Module Open

source = input(close, "Source", group="General")

H = (high/high[1]-1)*100
L = (low/low[1]-1)*100
O = (open/open[1]-1)*100
C = (close/close[1]-1)*100

HL = (L-H)*100

H := na(H[1]) ? H : H+H[1]
L := na(L[1]) ? L : L+L[1]
O := na(O[1]) ? O : O+O[1]
C := na(C[1]) ? C : C+C[1]
HL := na(HL[1]) ? HL : HL+HL[1]

difference_HL = H-L

dataSource = "Raw"

src_main = dataSource=="Raw" ? source : source==open ? O : source==close ? C : source==high ? H : source==low ? L : source

// OHLC Data & Derivatives Module Close


////////////////////
// --- Visualization

// Candle Colour Scheme
colorScheme = input(title="Colour Scheme", options = ["Japanese", "Heikin Ashi", "Uniform"], defval="Uniform", group="General")
uniformColor = #2a2e39
// Candle Colour Scheme
// Perfemetrics Highlighter Module Close

// --- Visualization
////////////////////

src_Standard = src_main
src_Dynamic = close > open ? H : L
src_DynamicAdvanced = high[0] > high[1] and low[1] > low[0] and close[0] > close[1] ? H : low[0] < low[1] and high[1] > high[0] and close[0] < close[1] ? L : C

population = 1

instance = input(title="Instance", options=["A", "B"], defval="A", group="General")
source_Input = input(title="Source", options=["Standard", "Dynamic", "Advanced Dynamic"], defval="Standard", group="General")

lengthA = input(15, title="Scope A", group="Instance A")
lenA = input(365, minval=1, title="Sample A", group="Instance A")
factorA = input(3.618, title="Factor A", group="Instance A")

lengthB = input(30, title="Scope A", group="Instance B")
lenB = input(30, minval=1, title="Sample A", group="Instance B")
factorB = input(0.5, title="Factor A", group="Instance B")

src = source_Input=="Standard" ? src_Standard : source_Input=="Dynamic" ? src_Dynamic : src_DynamicAdvanced
length = instance=="A" ? lengthA : lengthB
len = instance=="A" ? lenA : lenB
factor = instance=="A" ? factorA : factorB

mn = sma(src, population)
sd = sum(abs(src - mn), population) / population

stdev_up = src + (0.5 * sd)
stdev_down = src - (0.5 * sd)

definition1 = input(title="Definition", options=["Approximate", "Low", "Medium", "High", "Precise"], defval="High", group="Instance A")
definition2 = input(title="Definition", options=["Approximate", "Low", "Medium", "High", "Precise"], defval="High", group="Instance B")
definition = instance=="A" ? definition1 : definition2

length2 = round(length*factor)
length3 = round(length2*factor)
length4 = round(length3*factor)
length5 = round(length4*factor)

stdevMA(source)=>
    stdevMA1 = na(volume) ? ema(source, length) : vwma(source, length)
    stdevMA2 = na(volume) ? ema(source, length2) : vwma(source, length2)
    stdevMA3 = na(volume) ? ema(source, length3) : vwma(source, length3)
    stdevMA4 = na(volume) ? ema(source, length4) : vwma(source, length4)
    stdevMA5 = na(volume) ? ema(source, length5) : vwma(source, length5)
    maOut = definition=="Precise" ? (stdevMA1+stdevMA2+stdevMA3+stdevMA4+stdevMA5)/5 : definition=="High" ? (stdevMA1+stdevMA2+stdevMA3+stdevMA4)/4 : definition=="Medium" ? (stdevMA1+stdevMA2+stdevMA3)/3 : definition=="Low" ? (stdevMA1+stdevMA2)/2 : definition=="Approximate" ? stdevMA1 : na

maOutA = stdevMA(stdev_up)
maOutB = stdevMA(stdev_down)

osc = src/((maOutA+maOutB)/2)-1

// Fisher
high_ = highest(osc, len)
low_ = lowest(osc, len)
value = 0.0
value := .66 * ((osc - low_) / (high_ - low_) - .5) + .67 * nz(value[1])
fisher = .5 * log((1 + value) / (1 - value))
// Fisher

// squareV Transformation Open
z = 1.7 // Scale
p = value // Source
q = (1 / pow(3*z, 2)) - (1/3)
transform1 = pow((1 - pow(p, 2)), q)
transform2 = (q * (-2*p / (1 - pow(p, 2)))) * transform1
squareV = (p / (3*sqrt(1-pow(p, 2)))) * (pow(z, 2) - 1) - (pow(z, 2) / 2) * (sqrt(1 - pow(p, 2)) * transform2 / transform1)
// squareV Transformation Close

// Plots
hline(0.0)

bands_sample = input(50, title="Sample")
bands_src = squareV
bands_factor = input(1.5, "Factor")
bands_n = input(2.5, "N Value")

bands_stDev(bands_src, bands_sample)=>
    bands_a = sma(pow(bands_src, 2), bands_sample)
    bands_b = pow(sum(bands_src, bands_sample), 2) / pow(bands_sample, 2)
    bands_std = sqrt(bands_a - bands_b)

//sd = stDev(src, sample)
bands_mn = sma(bands_src, bands_sample)
bands_sd = sum(abs(bands_src - bands_mn), bands_sample) / bands_sample

bands_stdev05_up = bands_src + (0.5 * bands_sd)
bands_stdev1_up = bands_src + (1 * bands_sd)
bands_stdev15_up = bands_src + (1.5 * bands_sd)
bands_stdev2_up = bands_src + (2 * bands_sd)
bands_stdev3_up = bands_src + (3 * bands_sd)
bands_stdev4_up = bands_src + (4 * bands_sd)

bands_stdev05_down = bands_src - (0.5 * bands_sd)
bands_stdev1_down = bands_src - (1 * bands_sd)
bands_stdev15_down = bands_src - (1.5 * bands_sd)
bands_stdev2_down = bands_src - (2 * bands_sd)
bands_stdev3_down = bands_src - (3 * bands_sd)
bands_stdev4_down = bands_src - (4 * bands_sd)

bands_length = input(15, "Length")
bands_length2 = round(bands_length*bands_factor)
bands_length3 = round(bands_length2*bands_factor)
bands_length4 = round(bands_length3*bands_factor)
bands_length5 = round(bands_length4*bands_factor)

bands_stdevMA(bands_source)=>
    bands_stdevMA1 = sma(bands_source, bands_length)
    bands_stdevMA2 = sma(bands_source, bands_length2)
    bands_stdevMA3 = sma(bands_source, bands_length3)
    bands_stdevMA4 = sma(bands_source, bands_length4)
    bands_stdevMA5 = sma(bands_source, bands_length5)
    bands_maOut = (bands_stdevMA1+bands_stdevMA2+bands_stdevMA3+bands_stdevMA4+bands_stdevMA5)/5

bands_maOut05A = bands_stdevMA(bands_stdev05_up)
bands_maOut05B = bands_stdevMA(bands_stdev05_down)

bands_maOut1A = bands_stdevMA(bands_stdev1_up)
bands_maOut1B = bands_stdevMA(bands_stdev1_down)

bands_maOut15A = bands_stdevMA(bands_stdev15_up)
bands_maOut15B = bands_stdevMA(bands_stdev15_down)

bands_maOut2A = bands_stdevMA(bands_stdev2_up)
bands_maOut2B = bands_stdevMA(bands_stdev2_down)

bands_maOut3A = bands_stdevMA(bands_stdev3_up)
bands_maOut3B = bands_stdevMA(bands_stdev3_down)

bands_maOut4A = bands_stdevMA(bands_stdev4_up)
bands_maOut4B = bands_stdevMA(bands_stdev4_down)

plot((bands_maOut05A+bands_maOut05B)/2, color=#dddddd, title="Mean")

p05A = plot(bands_maOut05A, color=color.purple, title="MA", display=display.none)
p05B = plot(bands_maOut05B, color=color.purple, title="MA", display=display.none)
transpBlue05 = color.new(color.blue, 82)
fill(p05A, p05B, color=transpBlue05)

p1A = plot(bands_maOut1A, color=color.orange, title="MA", display=display.none)
p1B = plot(bands_maOut1B, color=color.orange, title="MA", display=display.none)
transpBlue1 = color.new(color.blue, 85)
fill(p1A, p1B, color=transpBlue1)

p15A = plot(bands_maOut15A, color=color.lime, title="MA", display=display.none)
p15B = plot(bands_maOut15B, color=color.lime, title="MA", display=display.none)
transpBlue15 = color.new(color.blue, 88)
fill(p15A, p15B, color=transpBlue15)

p2A = plot(bands_maOut2A, color=color.blue, title="MA", display=display.none)
p2B = plot(bands_maOut2B, style=plot.style_linebr, color=color.blue, title="MA", display=display.none)
transpBlue2 = color.new(color.blue, 91)
fill(p2A, p2B, color=transpBlue2)

p3A = plot(bands_maOut3A, color=color.lime, title="MA", display=display.none)
p3B = plot(bands_maOut3B, style=plot.style_linebr, color=color.lime, title="MA", display=display.none)
transpBlue3 = color.new(color.blue, 94)
fill(p3A, p3B, color=transpBlue3)

p4A = plot(bands_maOut4A, color=color.lime, title="MA", display=display.none)
p4B = plot(bands_maOut4B, style=plot.style_linebr, color=color.lime, title="MA", display=display.none)
transpBlue4 = color.new(color.blue, 97)
fill(p4A, p4B, color=transpBlue4)

squareV_Up = squareV*1.03
squareV_Down = squareV*0.97

rhso1 = plot(squareV_Up, color=color.lime, title="RHSO")
rhso2 = plot(squareV_Down, color=color.lime, title="RHSO")
solidLime = color.new(color.lime, 15)
fill(rhso1, rhso2, color=solidLime)