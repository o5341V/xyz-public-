//@version=5
indicator("Daily P&L and Volatility Statistics", overlay = true)

// Input parameters for start and end dates
startDate = input.time(timestamp("2023-01-01 00:00"), title="Start Date")
endDate = input.time(timestamp("2024-07-23 00:00"), title="End Date")

var table tbl = table.new(position.bottom_right, 12, 8, border_width = 1, bgcolor=color.rgb(34, 34, 34, 100))

// Define days of the week
daysOfWeek = array.new_string(7)
array.set(daysOfWeek, 0, "Sunday")
array.set(daysOfWeek, 1, "Monday")
array.set(daysOfWeek, 2, "Tuesday")
array.set(daysOfWeek, 3, "Wednesday")
array.set(daysOfWeek, 4, "Thursday")
array.set(daysOfWeek, 5, "Friday")
array.set(daysOfWeek, 6, "Saturday")

// Arrays to store statistics
var float[] gainDays = array.new_float(7, 0)
var float[] lossDays = array.new_float(7, 0)
var float[] avgGain = array.new_float(7, 0)
var float[] avgLoss = array.new_float(7, 0)
var float[] maxGain = array.new_float(7, 0)
var float[] maxLoss = array.new_float(7, 0)
var float[] avgCloseGain = array.new_float(7, 0)
var float[] avgCloseLoss = array.new_float(7, 0)
var float[] maxCloseGain = array.new_float(7, 0)
var float[] maxCloseLoss = array.new_float(7, 0)
var float[] avgHigh = array.new_float(7, 0)
var float[] avgLow = array.new_float(7, 0)
var float[] maxHigh = array.new_float(7, 0)
var float[] maxLow = array.new_float(7, 0)
var float[] avgVolume = array.new_float(7, 0)

calculate_stats() =>
    for i = 0 to 6
        dayOfWeek = array.get(daysOfWeek, i)
        gains = 0
        losses = 0
        totalGain = 0.0
        totalLoss = 0.0
        totalHigh = 0.0
        totalLow = 0.0
        totalVolume = 0.0
        closeGains = 0.0
        closeLosses = 0.0
        highChanges = 0.0
        lowChanges = 0.0
        maxGainValue = 0.0
        maxLossValue = 0.0
        maxCloseGainValue = 0.0
        maxCloseLossValue = 0.0
        maxHighValue = 0.0
        maxLowValue = 0.0
        count = 0

        for t = 1 to bar_index  // Loop through bars
            if time[t] >= startDate and time[t] <= endDate
                closeChange = (close[t-1] - close[t]) / close[t] * 100
                highChange = (high[t-1] - high[t]) / high[t] * 100
                lowChange = (low[t-1] - low[t]) / low[t] * 100
                vol = volume[t-1] / 1e6  // Convert volume to millions

                if dayofweek(time[t]) == i + 1  // Adjust dayofweek function (Pine Script uses 1 for Monday to 7 for Sunday)
                    if closeChange > 0
                        gains += 1
                        totalGain += closeChange
                        maxGainValue := count == 0 ? closeChange : math.max(maxGainValue, closeChange)
                    else
                        losses += 1
                        totalLoss += closeChange
                        maxLossValue := count == 0 ? closeChange : math.min(maxLossValue, closeChange)

                    totalHigh += highChange
                    totalLow += lowChange
                    totalVolume += vol
                    closeGains += closeChange > 0 ? closeChange : 0
                    closeLosses += closeChange < 0 ? closeChange : 0
                    highChanges += highChange
                    lowChanges += lowChange
                    maxCloseGainValue := count == 0 ? closeChange : math.max(maxCloseGainValue, closeChange)
                    maxCloseLossValue := count == 0 ? closeChange : math.min(maxCloseLossValue, closeChange)
                    maxHighValue := count == 0 ? highChange : math.max(maxHighValue, highChange)
                    maxLowValue := count == 0 ? lowChange : math.min(maxLowValue, lowChange)
                    count += 1

        array.set(gainDays, i, count > 0 ? (gains / count * 100) : na)
        array.set(lossDays, i, count > 0 ? (losses / count * 100) : na)
        array.set(avgGain, i, gains > 0 ? (totalGain / gains) : na)
        array.set(avgLoss, i, losses > 0 ? (totalLoss / losses) : na)
        array.set(maxGain, i, maxGainValue)
        array.set(maxLoss, i, maxLossValue)
        array.set(avgCloseGain, i, gains > 0 ? (closeGains / gains) : na)
        array.set(avgCloseLoss, i, losses > 0 ? (closeLosses / losses) : na)
        array.set(maxCloseGain, i, maxCloseGainValue)
        array.set(maxCloseLoss, i, maxCloseLossValue)
        array.set(avgHigh, i, count > 0 ? (highChanges / count) : na)
        array.set(avgLow, i, count > 0 ? (lowChanges / count) : na)
        array.set(maxHigh, i, maxHighValue)
        array.set(maxLow, i, maxLowValue)
        //array.set(avgVolume, i, count > 0 ? (totalVolume / count) : na)

calculate_stats()

// Fill the table headers
table.cell(tbl, 0, 0, "Day", text_color=color.yellow, bgcolor=color.rgb(34, 34, 34))
table.cell(tbl, 1, 0, "% Gain Days", text_color=color.green, bgcolor=color.rgb(34, 34, 34))
table.cell(tbl, 2, 0, "% Loss Days", text_color=color.red, bgcolor=color.rgb(34, 34, 34))
table.cell(tbl, 3, 0, "Avg % Gain", text_color=color.green, bgcolor=color.rgb(34, 34, 34))
table.cell(tbl, 4, 0, "Avg % Loss", text_color=color.red, bgcolor=color.rgb(34, 34, 34))
table.cell(tbl, 5, 0, "Max % Gain", text_color=color.green, bgcolor=color.rgb(34, 34, 34))
table.cell(tbl, 6, 0, "Max % Loss", text_color=color.red, bgcolor=color.rgb(34, 34, 34))
table.cell(tbl, 7, 0, "Avg % High", text_color=color.green, bgcolor=color.rgb(34, 34, 34))
table.cell(tbl, 8, 0, "Avg % Low", text_color=color.red, bgcolor=color.rgb(34, 34, 34))
table.cell(tbl, 9, 0, "Max % High", text_color=color.green, bgcolor=color.rgb(34, 34, 34))
table.cell(tbl, 10, 0, "Max % Low", text_color=color.red, bgcolor=color.rgb(34, 34, 34))
//table.cell(tbl, 11, 0, "Avg Volume (M)", text_color=color.blue, bgcolor=color.rgb(34, 34, 34))

// Set the style for table cells
cell_style(col, row, cellText, color) =>
    table.cell(tbl, col, row, cellText, text_color=color, bgcolor=color.rgb(34, 34, 34), text_size=size.tiny)

// Fill the table with data
for i = 0 to 6
    cell_style(0, i+1, array.get(daysOfWeek, i), color.white)
    cell_style(1, i+1, str.tostring(array.get(gainDays, i), format.percent), color.green)
    cell_style(2, i+1, str.tostring(array.get(lossDays, i), format.percent), color.red)
    cell_style(3, i+1, str.tostring(array.get(avgGain, i), format.percent), color.green)
    cell_style(4, i+1, str.tostring(array.get(avgLoss, i), format.percent), color.red)
    cell_style(5, i+1, str.tostring(array.get(maxGain, i), format.percent), color.green)
    cell_style(6, i+1, str.tostring(array.get(maxLoss, i), format.percent), color.red)
    cell_style(7, i+1, str.tostring(array.get(avgHigh, i), format.percent), color.green)
    cell_style(8, i+1, str.tostring(array.get(avgLow, i), format.percent), color.red)
    cell_style(9, i+1, str.tostring(array.get(maxHigh, i), format.percent), color.green)
    cell_style(10, i+1, str.tostring(array.get(maxLow, i), format.percent), color.red)
    //cell_style(11, i+1, str.tostring(math.round(array.get(avgVolume, i) * 10) / 10.0) + "M", color.blue)
