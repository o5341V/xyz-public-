//@version=5
indicator(title='Stochastic RSI', format =format.price, precision=2, timeframe="") //

//Custom Colors
///////////////////

eight_col = #000A4A
seven_col = #070354
six_col = #1C075F
five_col = #330C69
four_col = #4D1274
three_col = #69187E
two_col = #872089
one_col = #932881
zero_col = #9E3178

//negzero_col = #9E3178
//negone_col = #932881
//negtwo_col = #872089
//negthree_col = #C8685E
//negfour_col = #D2886B
//negfive_col = #DDA879
///negsix_col = #E7C688
//negseven_col = #F2E398
//negeight_col = #FBFDA8

//
negzero_col = #A83B6E
negone_col = #B34664
negtwo_col = #BD525B
negthree_col = #C8685E
negfour_col = #D2886B
negfive_col = #DDA879
negsix_col = #E7C688
negseven_col = #F2E398
negeight_col = #FBFDA8
//

positive_switch = true
negative_switch = true
//Color
color_fun(src) =>
    pos_col = positive_switch ? src >= 2.5 ? eight_col : src >= 2.1875 and src <= 2.5 ? seven_col : src >= 1.875 and src <= 2.1875 ? six_col : src >= 1.5625 and src <= 1.875 ? five_col : src >= 1.25 and src <= 1.5625 ? four_col : src >= .9375 and src <= 1.25 ? three_col : src >= .625 and src <= .9375 ? two_col : src >= .3125 and src <= .625 ? one_col : src >= 0 and src <= .3125 ? zero_col : na : na

    neg_col = negative_switch ? src <= -2.5 ? negeight_col : src >= -2.5 and src <= -2.1875 ? negseven_col : src >= -2.1875 and src <= -1.875 ? negsix_col : src >= -1.875 and src <= -1.5625 ? negfive_col : src >= -1.5625 and src <= -1.25 ? negfour_col : src >= -1.25 and src <= -.9375 ? negthree_col : src >= -.9375 and src <= -.625 ? negtwo_col : src >= -.625 and src <= -.3125 ? negone_col : src >= -.3125 and src <= 0 ? negzero_col : na : na
    col = src >= 0 ? pos_col : neg_col
    col 

//

len1 = input.int(100)
len2 = len1 + 1
len3 = len2 + 1
len4 = len3 + 1
len5 = len4 + 1
len6 = len5 + 1
len7 = len6 + 1
len8 = len7 + 1

stochrsi(len) =>
    smoothK = input(3, 'K')
    smoothD = input(3, 'D')
    lengthRSI = len1
    lengthStoch = len1
    src = close
    rsi1 = ta.rsi(src,len1)
    k = ta.sma(ta.stoch(rsi1, rsi1, rsi1, len1), smoothK)
    
[a1,a2,a3,a4,a5,a6,a7,a8] = request.security(syminfo.ticker, str.tostring(math.floor(timeframe.multiplier*0.5)), [stochrsi(len1), stochrsi(len2), stochrsi(len3), stochrsi(len4), stochrsi(len5), stochrsi(len6), stochrsi(len7), stochrsi(len8)])
[b1,b2,b3,b4,b5,b6,b7,b8] = request.security(syminfo.ticker, str.tostring(math.floor(timeframe.multiplier*0.75)), [stochrsi(len1), stochrsi(len2), stochrsi(len3), stochrsi(len4), stochrsi(len5), stochrsi(len6), stochrsi(len7), stochrsi(len8)])
[c1,c2,c3,c4,c5,c6,c7,c8] = request.security(syminfo.ticker, str.tostring(math.floor(timeframe.multiplier*1.25)), [stochrsi(len1), stochrsi(len2), stochrsi(len3), stochrsi(len4), stochrsi(len5), stochrsi(len6), stochrsi(len7), stochrsi(len8)])
[d1,d2,d3,d4,d5,d6,d7,d8] = request.security(syminfo.ticker, str.tostring(math.floor(timeframe.multiplier*1.5)), [stochrsi(len1), stochrsi(len2), stochrsi(len3), stochrsi(len4), stochrsi(len5), stochrsi(len6), stochrsi(len7), stochrsi(len8)])
[e1,e2,e3,e4,e5,e6,e7,e8] = request.security(syminfo.ticker, str.tostring(math.floor(timeframe.multiplier*1.75)), [stochrsi(len1), stochrsi(len2), stochrsi(len3), stochrsi(len4), stochrsi(len5), stochrsi(len6), stochrsi(len7), stochrsi(len8)])

tf1=math.avg(a1,a2,a3,a4,a5,a6,a7,a8)
tf2=math.avg(b1,b2,b3,b4,b5,b6,b7,b8)
tf3=math.avg(c1,c2,c3,c4,c5,c6,c7,c8)
tf4=math.avg(d1,d2,d3,d4,d5,d6,d7,d8)
tf5=math.avg(e1,e2,e3,e4,e5,e6,e7,e8)

[f1,f2,f3,f4,f5,f6,f7,f8] = request.security(syminfo.ticker, str.tostring(math.floor(timeframe.multiplier*2)), [stochrsi(len1), stochrsi(len2), stochrsi(len3), stochrsi(len4), stochrsi(len5), stochrsi(len6), stochrsi(len7), stochrsi(len8)])
[g1,g2,g3,g4,g5,g6,g7,g8] = request.security(syminfo.ticker, str.tostring(math.floor(timeframe.multiplier*2.5)), [stochrsi(len1), stochrsi(len2), stochrsi(len3), stochrsi(len4), stochrsi(len5), stochrsi(len6), stochrsi(len7), stochrsi(len8)])
[h1,h2,h3,h4,h5,h6,h7,h8] = request.security(syminfo.ticker, str.tostring(math.floor(timeframe.multiplier*3)), [stochrsi(len1), stochrsi(len2), stochrsi(len3), stochrsi(len4), stochrsi(len5), stochrsi(len6), stochrsi(len7), stochrsi(len8)])
[i1,i2,i3,i4,i5,i6,i7,i8] = request.security(syminfo.ticker, str.tostring(math.floor(timeframe.multiplier*3.5)), [stochrsi(len1), stochrsi(len2), stochrsi(len3), stochrsi(len4), stochrsi(len5), stochrsi(len6), stochrsi(len7), stochrsi(len8)])
[j1,j2,j3,j4,j5,j6,j7,j8] = request.security(syminfo.ticker, str.tostring(math.floor(timeframe.multiplier*4)), [stochrsi(len1), stochrsi(len2), stochrsi(len3), stochrsi(len4), stochrsi(len5), stochrsi(len6), stochrsi(len7), stochrsi(len8)])

tf6=math.avg(f1,f2,f3,f4,f5,f6,f7,f8)
tf7=math.avg(g1,g2,g3,g4,g5,g6,g7,g8)
tf8=math.avg(h1,h2,h3,h4,h5,h6,h7,h8)
tf9=math.avg(i1,i2,i3,i4,i5,i6,i7,i8)
tf10=math.avg(j1,j2,j3,j4,j5,j6,j7,j8)

[k1,k2,k3,k4,k5,k6,k7,k8] = request.security(syminfo.ticker, str.tostring(math.floor(timeframe.multiplier*5)), [stochrsi(len1), stochrsi(len2), stochrsi(len3), stochrsi(len4), stochrsi(len5), stochrsi(len6), stochrsi(len7), stochrsi(len8)])
[l1,l2,l3,l4,l5,l6,l7,l8] = request.security(syminfo.ticker, str.tostring(math.floor(timeframe.multiplier*6)), [stochrsi(len1), stochrsi(len2), stochrsi(len3), stochrsi(len4), stochrsi(len5), stochrsi(len6), stochrsi(len7), stochrsi(len8)])
[m1,m2,m3,m4,m5,m6,m7,m8] = request.security(syminfo.ticker, str.tostring(math.floor(timeframe.multiplier*7)), [stochrsi(len1), stochrsi(len2), stochrsi(len3), stochrsi(len4), stochrsi(len5), stochrsi(len6), stochrsi(len7), stochrsi(len8)])
[n1,n2,n3,n4,n5,n6,n7,n8] = request.security(syminfo.ticker, str.tostring(math.floor(timeframe.multiplier*8)), [stochrsi(len1), stochrsi(len2), stochrsi(len3), stochrsi(len4), stochrsi(len5), stochrsi(len6), stochrsi(len7), stochrsi(len8)])
[o1,o2,o3,o4,o5,o6,o7,o8] = request.security(syminfo.ticker, str.tostring(math.floor(timeframe.multiplier*9)), [stochrsi(len1), stochrsi(len2), stochrsi(len3), stochrsi(len4), stochrsi(len5), stochrsi(len6), stochrsi(len7), stochrsi(len8)])

tf11=math.avg(k1,k2,k3,k4,k5,k6,k7,k8)
tf12=math.avg(l1,l2,l3,l4,l5,l6,l7,l8)
tf13=math.avg(m1,m2,m3,m4,m5,m6,m7,m8)
tf14=math.avg(n1,n2,n3,n4,n5,n6,n7,n8)
tf15=math.avg(o1,o2,o3,o4,o5,o6,o7,o8)

plotHigherTF=input(true)
////
mtf = math.avg(tf1,tf2,tf3,tf4,tf5)
mtf2 = math.avg(tf6,tf7,tf8,tf9,tf10)
mtf3 = math.avg(tf11,tf12,tf13,tf14,tf15)

Notquitesure = (math.avg(mtf,mtf2,mtf3)/50)-1
//


fishfunc()=>
    fisher = 0.0
    fisher := 0.5 * math.log(( 1 + Notquitesure) / (1 - Notquitesure)) 
    fisher
    
plot(fishfunc(),color=color_fun(fishfunc()))

hline(2.5)
hline(-2.5)

hline(2)
hline(-2)

hline(1.5)
hline(-1.5)

barcolor(color_fun(fishfunc()))

//LOOK AT Z SCORE TABLE DATA FOR ABOVE H LINES AND STATISTICAL VALUES