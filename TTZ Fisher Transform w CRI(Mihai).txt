//@version=2
study("Fisher Transform")

//
//CRI

zl = 20
ZLEMA(nPeriod)=>
    xLag = (nPeriod - 1) / 2
    xEMAData = (close + (close - close[xLag]))
    xZLEMA = ema(xEMAData, nPeriod)
 
fSeries = 0.0
fSeries := close
 
if close > ZLEMA(zl)
    fSeries := (high+close)/2 
 
if close < ZLEMA(zl)
    fSeries := (low+close)/2
 
if (open > ZLEMA(zl)) and (close < ZLEMA(zl)) or (close > ZLEMA(zl) and open < ZLEMA(zl))
    fSeries := hl2
 
//ZScoreATR 
xStdDev = stdev(atr(1), 100)
xMA = sma(atr(1), 100)
zScoreATR = (atr(1) - xMA) / xStdDev
 
if (zScoreATR > 4) and (close < open)
    fSeries := (low+low+low+close)/4
 
if (zScoreATR > 4) and (open < close)
    fSeries := (high+high+high+close)/4
 
if (zScoreATR > 4)[1]
    fSeries := close
 
//  General Input:
method = "Fisher Transform"
SHOW_LABEL = true
SHOW_CHANNEL = false
uRevBull = input(true,title="Show Bullish Reversal Divergence")
uRevBear = input(true,title="Show Bearish Reversal Divergence")
uContBull = false
uContBear = false
slowLength = 6
high_src = high // input(high,title="High Source")
low_src  = low // input(low,title="Low Source")
delay = 1
backcol2 = false
 
atrLen = slowLength
 
//  Functions:
f_top_fractal(_src)=>_src[delay+3] < _src[delay] and _src[delay+2] < _src[delay] and _src[delay+1] < _src[delay] and _src[delay] > _src[delay-1]
f_bot_fractal(_src)=>_src[delay+3] > _src[delay] and _src[delay+2] > _src[delay] and _src[delay+1] > _src[delay] and _src[delay] < _src[delay-1] and falling(_src[1], 4)
f_fractalize(_src)=>f_top_fractal(_src) ? 1 : f_bot_fractal(_src) ? -1 : 0
 
//••   Fisher Functions    ••
f_fisher(_src, _window) =>
    _h = highest(_src, _window)
    _l = lowest(_src, _window)
    _value0 = 0.0
    _value0 := 0.33 * 2 * ((_src - _l) / (_h - _l) - 0.5) + 0.67 * nz(_value0[1])
    _value1 = iff(_value0 > .99, .999, iff(_value0 < -.99, -.999, _value0))
    _fisher = 0.0
    _fisher := 0.5 * log((1 + _value1) / (1 - _value1)) + .5 * nz(_fisher[1])
    _fisher
 
//••   End Fisher Functions ••
//
 
//plot(f_fisher(fSeries, slowLength), color=color.new(#d74444,5), title="Fisher",transp=5)
ft = f_fisher(fSeries, slowLength)
 
cri(_src)=>
    _rP = (rising(_src,1) and not rising(_src,1)[1]) or (falling(_src,1) and not falling(_src,1)[1]) ? 1 : 0
    _rPct1 = ema(sum(_rP, 40)/40,6)*100
    _rPct2 = ema(sum(_rP, 60)/60,6)*100 
    _rPct3 = ema(sum(_rP, 80)/80,6)*100
    _rPct4 = ema(sum(_rP, 100)/100,6)*100
    _cri = ema((_rPct1+_rPct2+_rPct3+_rPct4)/4,3)
 
//cri(_src)=>
//    _rP = (rising(_src,1) and not rising(_src,1)[1]) or (falling(_src,1) and not falling(_src,1)[1]) ? 1 : 0
//    _rPct1 = ema(sum(_rP, 20)/20,6)*100
//    _rPct2 = ema(sum(_rP, 40)/40,6)*100 
//    _rPct3 = ema(sum(_rP, 60)/60,6)*100
//    _cri = ema((_rPct1+_rPct2+_rPct3)/3,3)
 
//displayMTF = input(title="Display MTF?", defval=false)
//res = input(title="Multi Timeframe 1:", type=input.resolution, defval="60")
//res2 = input(title="Multi Timeframe 2:", type=input.resolution, defval="120")
//res3 = input(title="Multi Timeframe 3:", type=input.resolution, defval="180")
//res4 = input(title="Multi Timeframe 4:", type=input.resolution, defval="240")
//res5 = input(title="Multi Timeframe 5:", type=input.resolution, defval="D")
CRI = cri(ft)
//mtfCRI = displayMTF ? security(syminfo.tickerid, res, cri(f_fisher(close, slowLength))) : na
//mtfCRI2 = displayMTF ? security(syminfo.tickerid, res2, cri(f_fisher(close, slowLength))) : na
//mtfCRI3 = displayMTF ? security(syminfo.tickerid, res3, cri(f_fisher(close, slowLength))) : na
//mtfCRI4 = displayMTF ? security(syminfo.tickerid, res4, cri(f_fisher(close, slowLength))) : na
//mtfCRI5 = displayMTF ? security(syminfo.tickerid, res5, cri(f_fisher(close, slowLength))) : na
 
//plot(CRI, fuchsia,title="CRI")
//plot(mtfCRI, color=color.new(color.orange,5),title="MTF CRI")
//plot(mtfCRI2, color=color.new(color.yellow,5), title="MTF CRI 2")
//plot(mtfCRI3, color=color.new(color.yellow,5), title="MTF CRI 3")
//plot(mtfCRI4, color=color.new(color.yellow,5), title="MTF CRI 4")
//plot(mtfCRI5, color=color.new(color.yellow,5), title="MTF CRI 5")
 
cri2(_src)=>
    _rP = (rising(_src,1) and not rising(_src,1)[1]) or (falling(_src,1) and not falling(_src,1)[1]) ? 1 : 0
    _rPct1 = ema(sum(_rP, 12)/12,6)*100
    _cri = ema((_rPct1),3)
oneCRI = cri2(ft)

//plot(oneCRI,color=color.green)
//plot((reversalPercentage1*1.25+reversalPercentage2*1.25+reversalPercentage3*0.75+reversalPercentage4*0.75)/4, color=color.red, style=plot.style_circles,title="Mod")
//hline(30)
//hline(20)
 
 
oneCRI1 = input(10, title="length1")
oneCRI2 = input(15, title="length2")
oneCRI3 = input(16, title="length3")
oneCRI4 = input(17, title="length4")
oneCRI5 = input(18, title="length5")
oneCRI6 = input(19, title="length6")
oneCRI7 = input(20, title="length7")
oneCRI8 = input(21, title="length8")
oneCRI9 = input(22, title="length9")
oneCRI10 = input(23, title="lenth10")
oneCRI11 = input(24, title="length11")
oneCRI12 = input(25,title="length12")
oneCRI13 = input(27,title="length13")
oneCRI14 = input(30, title="length14")

 
 
oneCRIcolor= if oneCRI < oneCRI1 
    oneCRIcolor = #00ff00
if oneCRI >= oneCRI1  and oneCRI1 < oneCRI2
    oneCRIcolor := #00ff00
if oneCRI >= oneCRI2 and oneCRI < oneCRI3
    oneCRIcolor := #00e114,0
if oneCRI >= oneCRI3
    oneCRIcolor := #00c328, 0
if oneCRI >= oneCRI4
    oneCRIcolor := #00a53c, 0
if oneCRI >= oneCRI5
    oneCRIcolor := #008750, 0
if oneCRI >= oneCRI6
    oneCRIcolor := #006964, 0
if oneCRI >= oneCRI7
    oneCRIcolor := #004b78, 0
if oneCRI >= oneCRI8
    oneCRIcolor := #002d8c, 0
if oneCRI >= oneCRI9
    oneCRIcolor := #2d008c, 0
if oneCRI >= oneCRI10
    oneCRIcolor := #4b0078, 0
if oneCRI >= oneCRI11
    oneCRIcolor := #a5003c, 0
if oneCRI >= oneCRI12
    oneCRIcolor := #c30028, 0
if oneCRI >= oneCRI13
    oneCRIcolor := #e10014, 0
if oneCRI >= oneCRI14
    oneCRIcolor := #ff0000, 0

//plotchar(color=oneCRIcolor, "•", location.bottom, size = size.tiny)
//plotshape(oneCRI, style=shape.xcross, location=location.bottom ,transp=0, size=size.tiny, color=oneCRIcolor)
 
CRI1 = input(10, title="length1")
CRI2 = input(15, title="length2")
CRI3 = input(16, title="length3")
CRI4 = input(17, title="length4")
CRI5 = input(18, title="length5")
CRI6 = input(19, title="length6")
CRI7 = input(20, title="length7")
CRI8 = input(21, title="length8")
CRI9 = input(22, title="length9")
CRI10 = input(23, title="lenth10")
CRI11 = input(24, title="length11")
CRI12 = input(25,title="length12")
CRI13 = input(27,title="length13")
CRI14 = input(30, title="length14")

 
 
CRIcolor= if CRI < CRI1 
    CRIcolor = #00ff00	
if CRI >= CRI1  and CRI1 < CRI2
    CRIcolor := #00ff00
if CRI >= CRI2 and CRI < CRI3
    CRIcolor := #00e114, 0
if CRI >= CRI3
    CRIcolor := #00c328, 0
if CRI >= CRI4
    CRIcolor := #00a53c, 0
if CRI >= CRI5
    CRIcolor := #008750, 0
if CRI >= CRI6
    CRIcolor := #006964, 0
if CRI >= CRI7
    CRIcolor := #004b78, 0
if CRI >= CRI8
    CRIcolor := #002d8c, 0
if CRI >= CRI9
    CRIcolor := #2d008c, 0
if CRI >= CRI10
    CRIcolor := #4b0078, 0
if CRI >= CRI11
    CRIcolor := #a5003c, 0
if CRI >= CRI12
    CRIcolor := #c30028, 0
if CRI >= CRI13
    CRIcolor := #e10014, 0
if CRI >= CRI14
    CRIcolor := #ff0000, 0

//if CRI >= CRI15
    //CRIcolor := #FF0000
 
 
//plotshape(CRI, style=shape.diamond, location=location.top ,transp=0, size = size.tiny, color=CRIcolor)

//

// Pull traditional values
sHigh = security(tickerid, period, high)
sLow = security(tickerid, period, low)

// Inputs
length_Fisher = input(defval = 5, title = "Fisher Period Length", type = integer)
length_Fisher2 = input(defval = 200, title = "Fisher Period Length", type = integer)
length_Signal = input(defval = 1, title = "Signal Period Length", type = integer)
length_Signa2 = input(defval = 1, title = "Signal Period Length", type = integer)

// Calculations
current_Median = (sHigh + sLow) / 2
min_Median = lowest(current_Median, length_Fisher)
max_Median = highest(current_Median, length_Fisher)

min_Median2 = lowest(current_Median, length_Fisher2)
max_Median2 = highest(current_Median, length_Fisher2)

temp = (current_Median - min_Median) / (max_Median - min_Median)

temp3 = (current_Median - min_Median2) / (max_Median2 - min_Median2)

value = .5 * 2 * ((temp - .5) + (.5 * nz(value[1])))
value2 = .5 * 2 * ((temp3 - .5) + (.5 * nz(value2[1])))
value := value > .9999 ? .9999 : value
value := value < -0.9999 ? -0.9999 : value
temp2 = (1 + value) / (1 - value)
temp4 = (1 + value2) / (1 - value2)
fisher_Value = (.25 * log(temp2)) + (.5 * nz(fisher_Value[1]))
fisher_Signal  = nz(fisher_Value[length_Signal])

fisher_Value1 = (.25 * log(temp4)) + (.5 * nz(fisher_Value1[1]))
fisher_Signal2  = nz(fisher_Value1[length_Signal])


// Draw Out
//hline(0, color = #ff00ff)

upperTop=input(4.5)
upperBottom=input(3.5)
lowerTop=input(-4.5)
lowerBottom=input(-3.5)

top2 =  fisher_Value1 > upperBottom 
bottom2 = fisher_Value1 < lowerTop

//plotshape(top2, color = yellow, style=shape.cross, location=location.top)
//plotshape(bottom2, color = yellow, style=shape.cross, location=location.bottom)

top1 =  fisher_Value > upperBottom 
bottom1 = fisher_Value < lowerTop

//plotshape(top1, color = yellow, style=shape.cross, location=location.top)
//plotshape(bottom1, color = yellow, style=shape.cross, location=location.bottom)



//plot(1, style=3, color=gray), plot(-1, style=3, color=gray)
//ul1=plot(upperTop, "OB High", color = #fbc123)
//ul2=plot(upperBottom, "OB Low", color = #fbc123)
//fill(ul1,ul2, color=gray)
//ll1=plot(lowerTop, "OS High", color = #fbc123)
//ll2=plot(lowerBottom, "OS Low", color = #fbc123)
//fill(ll1,ll2, color=gray)

//plot(fisher_Signal, color = yellow, transp = 0)
//plot(fisher_Value1, color = #ff00ff, transp = 0)
//plot(fisher_Signal2, color = yellow, transp = 0)

backgroundColour = (fisher_Value1 > 3) ? white : na

//bgcolor(color=backgroundColour, transp=85)


backgroundColour1 = (fisher_Value1 < -3) ? white : na

//bgcolor(color=backgroundColour1, transp=85)

lengthv = input(52, minval=1)
mult = input(2.0, minval=0.001, maxval=50, title="StdDev")
basis = sma(fisher_Value, lengthv)
dev = mult * stdev(fisher_Value, lengthv)
upper = basis + dev
lower = basis - dev
//plot(basis, "Basis", color=#872323)


lengthh = input(252, minval=1)
multt = input(2.0, minval=0.001, maxval=50, title="StdDev")
basiss = sma(fisher_Value, lengthh)
devv = multt * stdev(fisher_Value, lengthh)
upperr = basiss + devv
lowerr = basiss - devv
//plot(basiss, "Basis", color=#872323)


topz =  fisher_Value1 > upper and fisher_Value > upperr
bottomz = fisher_Value1 < lower and fisher_Value < lowerr

//plotshape(topz, color = yellow, style=shape.cross, location=location.top)
//plotshape(bottomz, color = yellow, style=shape.cross, location=location.bottom)

src = input(hlc3,title="Source")
bbLength = input(12, title="Bollinger length")
bbN = input(2, title="Bollinger deviation")
kLength = input(25, title="keltner Length")
kN = input(1.25, title="Keltner deviation")

//Keltner
kUpper = ema(close,bbLength) + kN*atr(kLength)
kLower = ema(close,bbLength) - kN*atr(kLength)

//--- Bollinger
bbUpper = ema(src,bbLength) + bbN*stdev(src,bbLength)
bbLower = ema(src,bbLength) - bbN*stdev(src,bbLength)


//--- BB Squeeze
squeeze = bbUpper <= kUpper and bbLower >=kLower
squeezecolor = squeeze ? red : teal

p1 = plot(upper, "Upper", color=squeezecolor, style=circles)
p2 = plot(lower, "Lower", color=squeezecolor, style=circles)
//can add
//color=oneCRIcolor
//color=CRIcolor
fill(p1, p2, title = "Background", color=#198787, transp=95)

//p11 = plot(upperr, "Upper", color=squeezecolor, style=circles)
//p22 = plot(lowerr, "Lower", color=squeezecolor, style=circles)
//fill(p11, p22, title = "Background", color=#198787, transp=95)

DZbuy = 0.1
DZsell = 0.1
Period = input(14)
Lb = 60

jh = highest(fisher_Value, Lb)
jl = lowest(fisher_Value, Lb)
jc = (wma((jh-jl)*0.5,Period) + wma(jl,Period))
Hiline = jh - jc * DZbuy
Loline = jl + jc * DZsell
R = (4 * fisher_Value + 3 * fisher_Value[1] + 2 * fisher_Value[2] + fisher_Value[3] ) / 10
//

b=plot(Hiline, title='Hiline', color=squeezecolor , linewidth=1, style=circles, transp=0)
c=plot(Loline, title='Loline', color=squeezecolor , linewidth=1, style=circles, transp=0)

plot(fisher_Value, color = white, transp = 0, linewidth = 2)
plot(fisher_Signal, color = white, transp = 0, linewidth = 2)

plot(fisher_Value1, color = white, transp = 0, linewidth = 2)
plot(fisher_Signal2, color = white, transp = 0, linewidth = 2)

y= input(-1.5)

barcolor(fisher_Value < y ? white : na)

