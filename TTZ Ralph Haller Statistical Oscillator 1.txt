// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Jay

//@version=4
study(title="Ralph Haller Statistical Oscillator", shorttitle="Ralph Haller Statistical Oscillator", overlay=false)
src = input(close, title="Source")
population = 1
length = input(5, "Scope")
len = input(30, minval=1, title="Sample")

factor = input(1.5, "Factor")

stDev(src, population)=>
    a = sma(pow(src, 2), population)
    b = pow(sum(src, population), 2) / pow(population, 2)
    std = sqrt(a - b)

//sd = stDev(src, sample)
mn = sma(src, population)
sd = sum(abs(src - mn), population) / population

stdev_up = src + (0.5 * sd)
stdev_down = src - (0.5 * sd)

length2 = round(length*factor)
length3 = round(length2*factor)
length4 = round(length3*factor)
length5 = round(length4*factor)

stdevMA(source)=>
    stdevMA1 = sma(source, length)
    stdevMA2 = sma(source, length2)
    stdevMA3 = sma(source, length3)
    stdevMA4 = sma(source, length4)
    stdevMA5 = sma(source, length5)
    maOut = (stdevMA1+stdevMA2+stdevMA3+stdevMA4+stdevMA5)/5

maOutA = stdevMA(stdev_up)
maOutB = stdevMA(stdev_down)

osc = src/((maOutA+maOutB)/2)-1

// Fisher
high_ = highest(osc, len)
low_ = lowest(osc, len)
value = 0.0
value := .66 * ((osc - low_) / (high_ - low_) - .5) + .67 * nz(value[1])
fisher = .5 * log((1 + value) / (1 - value))
// Fisher

//
z = input(2, "Z Value")
p = value
q = (1 / pow(3*z, 2)) - (1/3)
transform1 = pow((1 - pow(p, 2)), q)
transform2 = (q * (-2*p / (1 - pow(p, 2)))) * transform1
squareV = (p / (3*sqrt(1-pow(p, 2)))) * (pow(z, 2) - 1) - (pow(z, 2) / 2) * (sqrt(1 - pow(p, 2)) * transform2 / transform1)

//

plot(osc, color=#dddddd, title="Oscillator", display=display.none)
plot(fisher, color=color.lime, title="Fisher")
plot(squareV, color=color.white, title="SquareV")