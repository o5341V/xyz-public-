//@version=5
indicator(title='Ralph Haller Statistical Oscillator', shorttitle='Gaussian', overlay=false, timeframe='', max_bars_back=1000)

period1 = input(64, title='Lengh of lookback for momentum')
period2 = input(128, title='Lengh of lookback for momentum')
period3 = input(256, title='Lengh of lookback for momentum')
period4 = input(512, title='Lengh of lookback for momentum')
period5 = input(1024, title='Lengh of lookback for momentum')
period6 = input(2048, title='Lengh of lookback for momentum')
period7 = input(4096, title='Lengh of lookback for momentum')

sqV() =>
    heikon = input(true)
    heikinashi = request.security(ticker.heikinashi(syminfo.tickerid), "", close)
    vsrc = heikon ? heikinashi : close
    vlen = input(100)
    // Fisher
    vhigh_ = ta.highest(vsrc, vlen)
    vlow_ = ta.lowest(vsrc, vlen)
    vvalue = 0.0
    vvalue := .66 * ((vsrc - vlow_) / (vhigh_ - vlow_) - .5) + .67 * nz(vvalue[1])
    vfisher = .5 * math.log((1 + vvalue) / (1 - vvalue))
    // Fisher
    //
    vz = 2
    vp = vvalue
    vq = 1 / math.pow(3 *vz, 2) - (1/3)
    vtransform1 = math.pow(1 - math.pow(vp, 2), vq)
    vtransform2 = vq * (-2 * vp / (1 - math.pow(vp, 2))) * vtransform1
    vsquareV = vp / (3 * math.sqrt(1 - math.pow(vp, 2))) * (math.pow(vz, 2) - 1) - math.pow(vz, 2) / 2 * (math.sqrt(1 - math.pow(vp, 2)) * vtransform2 / vtransform1)
    
sqVTF(ticker) =>
    a= request.security(ticker, "", sqV())
    b= request.security(ticker, "", sqV())
    c= request.security(ticker, "", sqV())
    theavg = math.avg(-a,-b,-c)*3
    theavg
    
x = sqVTF(syminfo.tickerid)
plot(x, color=ta.barssince(x < -5) < 20 and ta.ema(x, 8) < x ? color.green : ta.barssince(x > 5) < 20 and ta.ema(x, 8) > x ? color.maroon : color.red)

f_zscore(_src, _length, _smooth)=>
    _mean = ta.sma(_src, _length)
    _std = ta.stdev(_src-_mean, _length)
    _value = (_src - _mean) / _std
    _dema = ta.ema(ta.ema(_value, _smooth), _smooth)
    [_value, _dema]

smooth = input(3)

[z0, d0] = f_zscore(x, input(155), smooth)
//plot(series=z0, title="Zscore", color=color.new(color.green, 40), style=plot.style_line)


hline(0)