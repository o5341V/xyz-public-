//@version=5
indicator(title="Strategy Pinch 10-07-22 ", shorttitle="10-07-22", timeframe="", timeframe_gaps=true, overlay = false)

src1 = input(title="Source", defval=close)

barssincecount1 = input(5)

barssincecount2 = input(5)

// Getting inputs ADX
adxlen = input(14, title='ADX Smoothing')
dilen = input(14, title='DI Length')

//wtreshold = input(40, title='Weak Threshold')
//streshold = input(45, title='Strong Threshold')
//adx_color = adx > streshold and plus >= minus ? #434651 : adx > wtreshold and plus >= minus ? #434651 : adx > streshold and plus < minus ? #434651 : adx > wtreshold and plus < minus ? #ffffff : color.black

// Getting inputs MACD
fast_length = input(title="Fast Length", defval=12)
slow_length = input(title="Slow Length", defval=26)

signal_length = input.int(title="Signal Smoothing",  minval = 1, maxval = 50, defval = 9)
sma_source = input.string(title="Oscillator MA Type",  defval="EMA", options=["HMA", "EMA"])
sma_signal = input.string(title="Signal Line MA Type", defval="EMA", options=["HMA", "EMA"])
// Plot colors
col_macd = input(#2962FF, "MACD Line  ", group="Color Settings", inline="MACD")
col_signal = input(#FF6D00, "Signal Line  ", group="Color Settings", inline="Signal")


// Calculating
fast_ma1 = sma_source == "HMA" ? ta.hma(src1, fast_length) : ta.ema(src1, fast_length) 
slow_ma1 = sma_source == "HMA" ? ta.hma(src1, slow_length) : ta.ema(src1, slow_length) 
macd = fast_ma1 - slow_ma1
signal1 = sma_signal == "HMA" ? ta.hma(macd, signal_length) : ta.ema(macd, signal_length) 

hist = macd - signal1

// Calculating ADX

up = ta.change(high)
down = -ta.change(low)
trur = ta.rma(ta.tr, adxlen)
plus = fixnan(100 * ta.rma(up > down and up > 0 ? up : 0, dilen) / trur)
minus = fixnan(100 * ta.rma(down > up and down > 0 ? down : 0, dilen) / trur)
sum = plus + minus
adx = 100 * ta.rma(math.abs(plus - minus) / (sum == 0 ? 1 : sum), adxlen)
signal2 = sma_signal == "HMA" ? ta.hma(adx, signal_length) : ta.ema(adx, signal_length) 

// Plotting MACD

//bbstd1 = input(2)
//[bbMiddle1, bbUpper1, bbLower1] = ta.bb(macd, input(252), bbstd1)

Lowest_avg_macd1 = ta.lowest(macd, input(65))

////plot(macd, title="MACD", color=color.blue)
////plot(signal1, title="Signal", color=col_signal)

////plot(Lowest_avg_macd, color = color.white)
//plot(bbLower1, color =color.white)

// Plotting ADX

//bbstd2 = input(2)
//[bbMiddle2, bbUpper2, bbLower2] = ta.bb(adx, input(252), bbstd2)

Highest_avg_adx1 = ta.highest(adx, input(18))

////plot(adx, title='ADX', color=color.blue, linewidth=1)
////plot(signal2, title="Signal", color=col_signal)

//plot(bbUpper2, color =color.white)
////plot(Highest_adx, color = color.white)


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// AUTO MACD AND ADX

len = input(title='Length', defval=14)
th = input(title='threshold', defval=20)

TrueRange = 0.0
TrueRange := math.max(math.max(high - low, math.abs(high - nz(close[1]))), math.abs(low - nz(close[1])))

DirectionalMovementPlus = 0.0
DirectionalMovementPlus := high - nz(high[1]) > nz(low[1]) - low ? math.max(high - nz(high[1]), 0) : 0

DirectionalMovementMinus = 0.0
DirectionalMovementMinus := nz(low[1]) - low > high - nz(high[1]) ? math.max(nz(low[1]) - low, 0) : 0

SmoothedTrueRange = 0.0
SmoothedTrueRange := nz(SmoothedTrueRange[1]) - nz(SmoothedTrueRange[1]) / len + TrueRange

SmoothedDirectionalMovementPlus = 0.0
SmoothedDirectionalMovementPlus := nz(SmoothedDirectionalMovementPlus[1]) - nz(SmoothedDirectionalMovementPlus[1]) / len + DirectionalMovementPlus

SmoothedDirectionalMovementMinus = 0.0
SmoothedDirectionalMovementMinus := nz(SmoothedDirectionalMovementMinus[1]) - nz(SmoothedDirectionalMovementMinus[1]) / len + DirectionalMovementMinus

DIPlus = SmoothedDirectionalMovementPlus / SmoothedTrueRange * 100
DIMinus = SmoothedDirectionalMovementMinus / SmoothedTrueRange * 100
DX = math.abs(DIPlus - DIMinus) / (DIPlus + DIMinus) * 100
Lag = (len - 1) / 2
ZADX = ta.ema(DX + DX - DX[Lag], len)
ADX = ta.ema(DX, len)

ADXsignal = input(9)

signal_ZADX = ta.ema(ZADX, 9)

//plot(ZADX, color=color.new(#00ffff, 0), title='ZADX')

// //----

Price = hl2
alpha = input.float(0.7, minval=0, maxval=1)
Smooth = (Price + 2 * Price[1] + 2 * Price[2] + Price[3]) / 6
Cycle = 0.
InstPeriod = 0.
Q1 = 0.
DeltaPhase = 0.
I1 = 0.
DominantPeriod = 0.

Cycle := (1 - .5 * alpha) * (1 - .5 * alpha) * (Smooth - 2 * Smooth[1] + Smooth[2]) + 2 * (1 - alpha) * nz(Cycle[1]) - (1 - alpha) * (1 - alpha) * nz(Cycle[2])
Q1 := (.0962 * Cycle + .5769 * Cycle[2] - .5769 * Cycle[4] - .0962 * Cycle[6]) * (.5 + .08 * nz(InstPeriod[1]))
I1 := Cycle[3]
DeltaPhase := Q1 != 0 and Q1[1] != 0 ? (I1 / Q1 - I1[1] / Q1[1]) / (1 + I1 * I1[1] / (Q1 * Q1[1])) : na
DeltaPhase := DeltaPhase < 0.1 ? 0.1 : DeltaPhase
DeltaPhase := DeltaPhase > 1.1 ? 1.1 : DeltaPhase
MedianDelta = ta.percentile_nearest_rank(DeltaPhase, 5, 50)
DC = MedianDelta == 0 ? 15 : 6.28318 / MedianDelta + 0.5
InstPeriod := .33 * DC + .67 * nz(InstPeriod[1])
DominantPeriod := .15 * InstPeriod + .85 * nz(DominantPeriod[1])


fastper = int(DominantPeriod)
slowper = int(2 * DominantPeriod + 1)


pine_ema(src, length) =>
    _alpha = 2 / (length + 1)
    sum = 0.0
    sum := na(sum[1]) ? ta.sma(src, length) : _alpha * src + (1 - _alpha) * nz(sum[1])
    sum


src = input(hl2, 'macd source')
slow_ema = pine_ema(src, nz(slowper, 26))
fast_ema = pine_ema(src, nz(fastper, 12))

MACD = fast_ema - slow_ema
signal_MACD = ta.ema(MACD, 9)

// Plot colors

col_macd1 = #0094ff
col_signal1 = #ff6a00

//plot(MACD, color=color.new(color.blue, 0))
//plot(signal_MACD, color=color.new(color.orange, 0))
//plot(hist, title='Histogram', style=plot.style_columns, color=hist >= 0 ? hist[1] < hist ? col_grow_above : col_fall_above : hist[1] < hist ? col_grow_below : col_fall_below, transp=0)

show_adaptive_cycle_periods = input(false)
//plot(show_adaptive_cycle_periods ? fastper : na, color=color.new(color.green, 0))
//plot(show_adaptive_cycle_periods ? slowper : na, color=color.new(color.red, 0))

show_moving_average_independently = input(false)
//plot(show_moving_average_independently ? slow_ema : na, color=color.new(color.orange, 0))
//plot(show_moving_average_independently ? fast_ema : na, color=color.new(color.blue, 0))

Lowest_avg_macd = ta.lowest(MACD, input(75))

////plot(macd, title="MACD", color=color.blue)
////plot(signal1, title="Signal", color=col_signal)

//plot(Lowest_avg_macd, color = color.white)
//plot(bbLower1, color =color.white)

// Plotting ADX

//bbstd2 = input(2)
//[bbMiddle2, bbUpper2, bbLower2] = ta.bb(adx, input(252), bbstd2)

Highest_avg_adx = ta.highest(ZADX, input(35))

////plot(adx, title='ADX', color=color.blue, linewidth=1)
////plot(signal2, title="Signal", color=col_signal)

//plot(bbUpper2, color =color.white)
//plot(Highest_avg_adx, color = color.white)

//Plotting Signals

// Creating Conditions 1

//

PinchCond1 = adx >= Highest_avg_adx1 and macd <= Lowest_avg_macd1 

//

MAcrossCond1 = macd >= signal1 and adx <= signal2

///////////////////////////////////////////

Confirmations1 = ta.barssince(MAcrossCond1) <= barssincecount1 and PinchCond1

//

False1 = PinchCond1[1] == true and PinchCond1 == false

//Confirmation1 = Confirmations1
//Confirmation1 = PinchCond1[1] and close > close[1]
Confirmation1 = False1

// Creating Conditions 2

PinchCond = ZADX >= Highest_avg_adx and MACD <= Lowest_avg_macd

//

MAcrossCond = MACD >= signal_MACD and ZADX <= signal_ZADX

//////////////////////////////////////////

Confirmations2 = ta.barssince(MAcrossCond) <= barssincecount2 and PinchCond

//

False2 = PinchCond[1] == true and PinchCond == false

//Confirmation2 = Confirmations2
//Confirmation2 = PinchCond[1] and close > close[1]
Confirmation2 = False2

//

LookbackCombo1 = input(1)

countCombo1    = 0

for i = 0 to LookbackCombo1
    if (PinchCond[i] or PinchCond1[i] == true) 
        countCombo1 := countCombo1 + 1

positiveComboPercent1 = (countCombo1 / LookbackCombo1) * 100 
plot(positiveComboPercent1, title="C1 %", style=plot.style_area, color=color.rgb(70, 158, 106, 90))

//

LookbackCombo2 = input(1)

countCombo2    = 0

for i = 0 to LookbackCombo2
    if (Confirmation1[i] or Confirmation2[i] == true) 
        countCombo2 := countCombo2 + 1

positiveComboPercent2 = (countCombo2 / LookbackCombo2) * 100 
plot(positiveComboPercent2, title="C %", style=plot.style_line, color=color.rgb(0, 252, 155))

//

Bigup = positiveComboPercent1[1] and positiveComboPercent2[1] >= 200 

Barcolors1 = positiveComboPercent1 ? color.rgb(70, 158, 106, 40) : positiveComboPercent2 ? color.rgb(0, 252, 155, 0) : na
barcolor(Barcolors1)

//Barcolors2 =  Bigup ? color.rgb(0, 252, 155) : Barcolors1