//@version=5
// Based on UncLeL's Fisher and Discriminator code
// By Futur
// Upgraded to v4 by futuremihai
indicator(title='Optimized Fisher Transform MtF')

displayMTF = input(title='Display MTF?', defval=true)
res1 = input.timeframe(title='Multi Timeframe 1:', defval='30')
res2 = input.timeframe(title='Multi Timeframe 2:', defval='60')
res3 = input.timeframe(title='Multi Timeframe 3:', defval='120')
res4 = input.timeframe(title='Multi Timeframe 4:', defval='240')
res5 = input.timeframe(title='Multi Timeframe 5:', defval='D')

PI = 3.14159265359

conversionPeriods = 9
basePeriods = 26
laggingSpan2Periods = 52
displacement = 26

donchian(len) =>
    math.avg(ta.lowest(len), ta.highest(len))

conversionLine = donchian(conversionPeriods)
baseLine = donchian(basePeriods)
leadLine1 = math.avg(conversionLine, baseLine)
leadLine2 = donchian(laggingSpan2Periods)

source = hlc3

float Period = .0
float C1 = .0
float C2 = .0
float Df = .0
float C3 = .0
float smooth = .0
float Q1 = .0
float I1 = .0
float jI = .0
float jQ = .0
float I2 = .0
float Q2 = .0
float Re = .0
float Im = .0

//
// --- Start the Homodyne Discriminator Caculations
//
// Mutable Variables (non-series)
C1 := 0.0962
C2 := 0.5769
Df := 0.5

//
C3 := nz(Period[1]) * 0.075 + 0.54
smooth := (hl2 * 4.0 + hl2[1] * 3.0 + hl2[2] * 2.0 + hl2[3]) / 10.0
dDeTrend = (smooth * C1 + nz(smooth[2]) * C2 - nz(smooth[4]) * C2 - nz(smooth[6]) * C1) * C3

// Compute InPhase and Quadrature components
Q1 := (dDeTrend * C1 + nz(dDeTrend[2]) * C2 - nz(dDeTrend[4]) * C2 - nz(dDeTrend[6]) * C1) * C3
I1 := nz(dDeTrend[3])

// Advance Phase of I1 and Q1 by 90 degrees
jI := (I1 * C1 + nz(I1[2]) * C2 - nz(I1[4]) * C2 - nz(I1[6]) * C1) * C3
jQ := (Q1 * C1 + nz(Q1[2]) * C2 - nz(Q1[4]) * C2 - nz(Q1[6]) * C1) * C3

// Phaser addition for 3 bar averaging
I2_ = I1 - jQ
Q2_ = Q1 + jI
// Smooth i and q components before applying discriminator
I2 := 0.2 * I2_ + 0.8 * nz(I2[1])
Q2 := 0.2 * Q2_ + 0.8 * nz(Q2[1])

// Extract Homodyne Discriminator
Re_ = I2 * nz(I2[1]) + Q2 * nz(Q2[1])
Im_ = I2 * nz(Q2[1]) - Q2 * nz(I2[1])
Re := 0.2 * Re_ + 0.8 * nz(Re[1])
Im := 0.2 * Im_ + 0.8 * nz(Im[1])

dp_ = Re != 0 and Im != 0 ? 6.28318 / math.atan(Im / Re) : 0
II = nz(Period[1])
dp = math.max(math.max(math.min(math.min(dp_, 1.5 * II), 50), 0.6667 * II), 6)
Period := dp * 0.2 + nz(Period[1]) * 0.8

float SmoothPeriod = .0
SmoothPeriod := 0.33 * Period + nz(SmoothPeriod[1]) * 0.67

lengthx = 1
for i = 0 to 1000 by 1
    if i >= SmoothPeriod
        break
    lengthx += 1
    lengthx
cycle_length_modifier = input(2.0, title='Modifier to shorten the Dominant cycle Length (Half of dominant cycle, Third, etc')
lengthModded = lengthx * cycle_length_modifier

//Calculate the Modified Fisher and length selection
fix_the_length = input(true, title='Use Fisher fixed lookback or on cycle probabilities')
fixed_length = input(100, title='Lookback for the Optimizied Fisher (Probability of events for a certain lookback)')
activate_modifier = input(true, title='Modify Auto Cycle Component')
length1 = fix_the_length ? fixed_length : activate_modifier ? lengthModded : lengthx

val = 0.0

for i = 0 to length1 by 1
    val += (source[i] - source[i + 1] <= 0 ? 0 : source[i] * volume[i])
    val

val2 = 0.0
for i = 0 to length1 by 1
    val2 += (source[i] - source[i + 1] >= 0 ? 0 : source[i] * volume[i])
    val2
flowRatio = val / val2


HL2 = 1 - (100 - 100 / (1 + flowRatio)) / 100  //test value to see flowrate/MFI values
//xHL2 = open
//WIP, still need to figure out how to manipulate the transform to u= 0, sigma =1 when orginal PDF not balanced
ff(_xHL2, _length) =>
    _xMaxH = ta.highest(_xHL2, math.round(_length))
    _xMinL = ta.lowest(_xHL2, math.round(_length))
    _normalized = 2.0 * ((_xHL2 - _xMinL) / (_xMaxH - _xMinL) - 0.5)
    _nValue1 = 0.0
    _nValue1 := ta.ema(4 * ((_xHL2 - _xMinL) / (_xMaxH - _xMinL) - 0.5) - nz(_nValue1[10]), 10)  //ZLMA(Ehlers v2) of normalized input
    iff_1 = _nValue1 < -.99 ? -.999 : _nValue1
    _nValue2 = _nValue1 > .99 ? .999 : iff_1
    _scale = 1 - (100 - 100 / (1 + flowRatio)) / 100
    _xLag = (_length - 1) / 2
    _z_score = (_normalized - _nValue2) / ta.stdev(_normalized, math.round(_length))
    _std = ta.stdev(_normalized, math.round(_length))  //WIP
    float _Fish = 0
    _Fish := ta.ema(1 * math.log(_scale * (1 + _nValue2) / (1 - _nValue2)) - nz(_Fish[3]), 3)
    _Fish

//MtfFisher

// 30m

mtfK1 = displayMTF ? request.security(syminfo.tickerid, res1, ff(close, 21) <= -3 ? 1 : 0) : na
mtfK2 = displayMTF ? request.security(syminfo.tickerid, res1, ff(close, 52) <= -2 ? 1 : 0) : na
mtfK3 = displayMTF ? request.security(syminfo.tickerid, res1, ff(close, 89) <= -2 ? 1 : 0) : na
mtfK4 = displayMTF ? request.security(syminfo.tickerid, res1, ff(close, 155) <= -1 ? 1 : 0) : na
mtfK5 = displayMTF ? request.security(syminfo.tickerid, res1, ff(close, 252) <= -1 ? 1 : 0) : na
mtfK6 = displayMTF ? request.security(syminfo.tickerid, res1, ff(close, 555) <= -1 ? 1 : 0) : na


mtfRes1 = mtfK1 + mtfK2 + mtfK3 + mtfK4 + mtfK5 + mtfK6 
plot(series=mtfRes1, title="Bull Power Level", color=color.new(#00E5C4, 0), style=plot.style_line)

// 60m

mtfK11 = displayMTF ? request.security(syminfo.tickerid, res2, ff(close, 21) <= -3 ? 1 : 0) : na
mtfK22 = displayMTF ? request.security(syminfo.tickerid, res2, ff(close, 52) <= -2 ? 1 : 0) : na
mtfK33 = displayMTF ? request.security(syminfo.tickerid, res2, ff(close, 89) <= -2 ? 1 : 0) : na
mtfK44 = displayMTF ? request.security(syminfo.tickerid, res2, ff(close, 155) <= -1 ? 1 : 0) : na
mtfK55 = displayMTF ? request.security(syminfo.tickerid, res2, ff(close, 252) <= -1 ? 1 : 0) : na
mtfK66 = displayMTF ? request.security(syminfo.tickerid, res2, ff(close, 555) <= -1 ? 1 : 0) : na


mtfRes2 = mtfK11 + mtfK22 + mtfK33 + mtfK44 + mtfK55 + mtfK66
plot(series=mtfRes2, title="Bull Power Level", color=color.new(#0078DD, 0), style=plot.style_line)

// 120m

mtfK111 = displayMTF ? request.security(syminfo.tickerid, res3, ff(close, 21) <= -3 ? 1 : 0) : na
mtfK222 = displayMTF ? request.security(syminfo.tickerid, res3, ff(close, 52) <= -2 ? 1 : 0) : na
mtfK333 = displayMTF ? request.security(syminfo.tickerid, res3, ff(close, 89) <= -2 ? 1 : 0) : na
mtfK444 = displayMTF ? request.security(syminfo.tickerid, res3, ff(close, 155) <= -1 ? 1 : 0) : na
mtfK555 = displayMTF ? request.security(syminfo.tickerid, res3, ff(close, 252) <= -1 ? 1 : 0) : na
mtfK666 = displayMTF ? request.security(syminfo.tickerid, res3, ff(close, 555) <= -1 ? 1 : 0) : na


mtfRes3 = mtfK111 + mtfK222 + mtfK333 + mtfK444 + mtfK555 + mtfK666 
plot(series=mtfRes3, title="Bull Power Level", color=color.new(#0C00D5, 0), style=plot.style_line)

// 240m

mtfK1111 = displayMTF ? request.security(syminfo.tickerid, res4, ff(close, 21) <= -3 ? 1 : 0) : na
mtfK2222 = displayMTF ? request.security(syminfo.tickerid, res4, ff(close, 52) <= -2 ? 1 : 0) : na
mtfK3333 = displayMTF ? request.security(syminfo.tickerid, res4, ff(close, 89) <= -2 ? 1 : 0) : na
mtfK4444 = displayMTF ? request.security(syminfo.tickerid, res4, ff(close, 155) <= -1 ? 1 : 0) : na
mtfK5555 = displayMTF ? request.security(syminfo.tickerid, res4, ff(close, 252) <= -1 ? 1 : 0) : na
mtfK6666 = displayMTF ? request.security(syminfo.tickerid, res4, ff(close, 555) <= -1 ? 1 : 0) : na


mtfRes4 = mtfK1111 + mtfK2222 + mtfK3333 + mtfK4444 + mtfK5555 + mtfK6666 
plot(series=mtfRes4, title="Bull Power Level", color=color.new(#8700CE, 0), style=plot.style_line)

// 1D

mtfK11111 = displayMTF ? request.security(syminfo.tickerid, res5, ff(close, 21) <= -3 ? 1 : 0) : na
mtfK22222 = displayMTF ? request.security(syminfo.tickerid, res5, ff(close, 52) <= -2 ? 1 : 0) : na
mtfK33333 = displayMTF ? request.security(syminfo.tickerid, res5, ff(close, 89) <= -2 ? 1 : 0) : na
mtfK44444 = displayMTF ? request.security(syminfo.tickerid, res5, ff(close, 155) <= -1 ? 1 : 0) : na
mtfK55555 = displayMTF ? request.security(syminfo.tickerid, res5, ff(close, 252) <= -1 ? 1 : 0) : na
mtfK66666 = displayMTF ? request.security(syminfo.tickerid, res5, ff(close, 555) <= -1 ? 1 : 0) : na


mtfRes5 = mtfK11111 + mtfK22222 + mtfK33333 + mtfK44444 + mtfK55555 + mtfK66666 
plot(series=mtfRes5, title="Bull Power Level", color=color.new(#ff00ff, 0), style=plot.style_line)
